is.null(time0)
zero.norm <- function(x, time0 = NULL, data.info = c("sample", "subject", "time", "class"),
meaning = T, percentage = F, FC = F, scaling = T) {
if (is.null(time0) == T) {stop(print("please add your time 0"))}
library(stringr)
library(dplyr)
library(purrr)
foldchange <- function(x, y) {
res <- (x-y)/y
return(res)
}
perce <- function(x,y) {
res <- (x/y)*100
return(res)
}
if (percentage == T) {
cols = c((length(data.info)+1): ncol(x))
x[,cols] <- lapply(x[,cols], function(x) replace(x, x == 0, min(x[x>0], na.rm = TRUE)))
}
if (meaning == T) {
T0 = time0
untreated <- x[x[,data.info[3]] <= T0,]
treated <- x[x[,data.info[3]] > T0,]
tutti_con <- aggregate(untreated[, (length(data.info) +1):ncol(untreated)], list(untreated[,"subject"]), median)
colnames(tutti_con)[1] <- "subject"
df14 <- left_join(x, tutti_con, by = "subject")
if (FC == T) {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `foldchange`))
}
if (percentage == T) {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `perce`))
} else {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `-`))
}
NEM_norm <- cbind(x[,1:length(data.info)], NEM_norm)
NEM_norm <- NEM_norm[,-which(colnames(NEM_norm) =="id")]
} else {
NEM_norm <- x
}
if (scaling == T) {
tutti_scal <- aggregate(NEM_norm[, (length(data.info) +1):ncol(NEM_norm)], list(NEM_norm[,"subject"]), sd)
colnames(tutti_scal)[1] <- "subject"
df14 <- left_join(NEM_norm, tutti_scal, by = "subject")
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `/`))
NEM_norm <- cbind(x[,1:length(data.info)], NEM_norm)
NEM_norm <- NEM_norm[,-which(colnames(NEM_norm) =="id")]
}
return(NEM_norm)
}
zero.norm(x)
zero.norm <- function(x, time0 = NULL, data.info = c("sample", "subject", "time", "class"),
meaning = T, percentage = F, FC = F, scaling = T) {
if (is.null(time0) == T) {stop("please add your time 0")}
library(stringr)
library(dplyr)
library(purrr)
foldchange <- function(x, y) {
res <- (x-y)/y
return(res)
}
perce <- function(x,y) {
res <- (x/y)*100
return(res)
}
if (percentage == T) {
cols = c((length(data.info)+1): ncol(x))
x[,cols] <- lapply(x[,cols], function(x) replace(x, x == 0, min(x[x>0], na.rm = TRUE)))
}
if (meaning == T) {
T0 = time0
untreated <- x[x[,data.info[3]] <= T0,]
treated <- x[x[,data.info[3]] > T0,]
tutti_con <- aggregate(untreated[, (length(data.info) +1):ncol(untreated)], list(untreated[,"subject"]), median)
colnames(tutti_con)[1] <- "subject"
df14 <- left_join(x, tutti_con, by = "subject")
if (FC == T) {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `foldchange`))
}
if (percentage == T) {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `perce`))
} else {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `-`))
}
NEM_norm <- cbind(x[,1:length(data.info)], NEM_norm)
NEM_norm <- NEM_norm[,-which(colnames(NEM_norm) =="id")]
} else {
NEM_norm <- x
}
if (scaling == T) {
tutti_scal <- aggregate(NEM_norm[, (length(data.info) +1):ncol(NEM_norm)], list(NEM_norm[,"subject"]), sd)
colnames(tutti_scal)[1] <- "subject"
df14 <- left_join(NEM_norm, tutti_scal, by = "subject")
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `/`))
NEM_norm <- cbind(x[,1:length(data.info)], NEM_norm)
NEM_norm <- NEM_norm[,-which(colnames(NEM_norm) =="id")]
}
return(NEM_norm)
}
zero.norm(x)
zero.norm <- function(x, time0 = NULL, data.info = c("sample", "subject", "time", "class"),
meaning = T, percentage = F, FC = F, scaling = T) {
if (is.null(time0) == T) {stop("please add your time 0")}
library(stringr)
library(dplyr)
library(purrr)
foldchange <- function(x, y) {
res <- (x-y)/y
return(res)
}
perce <- function(x,y) {
res <- (x/y)*100
return(res)
}
if (percentage == T) {
cols = c((length(data.info)+1): ncol(x))
x[,cols] <- lapply(x[,cols], function(x) replace(x, x == 0, min(x[x>0], na.rm = TRUE)))
}
if (meaning == T) {
T0 = time0
untreated <- x[x[,data.info[3]] <= T0,]
treated <- x[x[,data.info[3]] > T0,]
tutti_con <- aggregate(untreated[, (length(data.info) +1):ncol(untreated)], list(untreated[,"subject"]), median)
colnames(tutti_con)[1] <- "subject"
df14 <- left_join(x, tutti_con, by = "subject")
if (FC == T) {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `foldchange`))
}
if (percentage == T) {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `perce`))
} else {
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `-`))
}
NEM_norm <- cbind(x[,1:length(data.info)], NEM_norm)
NEM_norm <- NEM_norm[,-which(colnames(NEM_norm) =="id")]
} else {
NEM_norm <- x
}
if (scaling == T) {
tutti_scal <- aggregate(NEM_norm[, (length(data.info) +1):ncol(NEM_norm)], list(NEM_norm[,"subject"]), sd)
colnames(tutti_scal)[1] <- "subject"
df14 <- left_join(NEM_norm, tutti_scal, by = "subject")
NEM_norm <- cbind(id=df14[,1], map2_df(df14[,(length(data.info) +1):ncol(x)], df14[,(ncol(x) +1):ncol(df14)], `/`))
NEM_norm <- cbind(x[,1:length(data.info)], NEM_norm)
NEM_norm <- NEM_norm[,-which(colnames(NEM_norm) =="id")]
}
return(NEM_norm)
}
steroids <- read.csv("~/Dati Corinne/steroids.csv")
View(steroids)
HCORT <- steroids[,-5]
View(HCORT)
library(stat.tools)
print("hello")
library(stat.tools)
library(stat.tools)
library(stat.tools)
citation(mixOmics)
citation("mixOmics")
install.packages("ggplots2")
install.packages("ggplot2")
library(stat.tools)
library(stat.tools)
library(stat.tools)
library(stat.tools)
getwd()
build_manual(pkg = "C:/Users/Luca Narduzzi/Documents/stat_tools", path = NULL)
library(devtools)
build_manual(pkg = "C:/Users/Luca Narduzzi/Documents/stat_tools", path = NULL)
package.skeleton("stat_tools")
package.skeleton("stat.tools")
package.skeleton("stat.tools")
library(stat.tools)
library(stat.tools)
library(stat.tools)
